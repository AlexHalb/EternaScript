diff -X .gitignore -ur LinearFold_stock/src/LinearFoldEval.cpp LinearFold/src/LinearFoldEval.cpp
--- LinearFold_stock/src/LinearFoldEval.cpp	2020-06-24 15:45:43.433567579 -0400
+++ LinearFold/src/LinearFoldEval.cpp	2020-06-23 19:53:08.557451053 -0400
@@ -16,15 +16,34 @@
 
 using namespace std;
 
-long eval(string seq, string ref, bool is_verbose) {
+#ifdef lv
+typedef long ENERGY_TYPE;
+#else
+typedef float ENERGY_TYPE;
+#endif
 
+void (*eos_cb)(int index, int fe) = NULL;
+
+
+
+ENERGY_TYPE eval(string seq, string ref, bool is_verbose) {
     int seq_length = seq.length();
 
+#ifndef lv
+    if (cache_single[0][1] < 1) {
+        initialize_cachesingle();
+    }
+#endif
+
     vector<int> if_tetraloops;
     vector<int> if_hexaloops;
     vector<int> if_triloops;
 
+#ifdef lv
     v_init_tetra_hex_tri(seq, seq_length, if_tetraloops, if_hexaloops, if_triloops); // calculate if_tetraloops, if_hexaloops, if_triloops
+#else
+    // init_tetra_hex_tri(seq, seq_length, if_tetraloops, if_hexaloops, if_triloops); // calculate if_tetraloops, if_hexaloops, if_triloops
+#endif
 
     vector<int> eval_nucs;
     eval_nucs.clear();
@@ -33,15 +52,21 @@
         eval_nucs[i] = GET_ACGU_NUM(seq[i]);
     }
 
-    long total_energy = 0;
-    long external_energy = 0;
-    long M1_energy[seq_length];
+    ENERGY_TYPE total_energy = 0;
+
+    ENERGY_TYPE external_energy = 0;
+
+    ENERGY_TYPE M1_energy[seq_length];
+
+    // AMW maybe
     long multi_number_unpaired[seq_length];
     // int external_number_unpaired = 0;
 
     stack<pair<int, int>> stk; // tuple of (index, page)
     tuple<int, int> inner_loop;
 
+    int num_external_unpaired = 0;
+    // bool all_unpaired = true;
     for (int j=0; j<seq_length; j++) {
         M1_energy[j] = 0; // init multi of position j
         multi_number_unpaired[j] = 0;
@@ -49,9 +74,14 @@
         if (ref[j] == '.') {
             if (!stk.empty())
                 multi_number_unpaired[stk.top().first] += 1;
+#ifndef lv
+            else
+                num_external_unpaired += 1;
+#endif
         }
 
         else if (ref[j] == '(') {
+            // all_unpaired = false;
             if (!stk.empty()) { // +1 for outer loop page
                 stk.top().second ++;
             }
@@ -59,6 +89,7 @@
         }
 
         else if (ref[j] == ')') {
+            // all_unpaired = false;
             assert(!stk.empty());
             tuple<int, int> top = stk.top();
             int i = get<0>(top), page = get<1>(top);
@@ -72,6 +103,7 @@
             int nucj1 = (j+1) < seq_length ? eval_nucs[j+1] : -1; // only for calculating v_score_M1
 
             if (page == 0) { // hairpin
+#ifdef lv
                 int tetra_hex_tri = -1;
                 if (j-i-1 == 4) // 6:tetra
                     tetra_hex_tri = if_tetraloops[i];
@@ -80,9 +112,16 @@
                 else if (j-i-1 == 3) // 5:tri
                     tetra_hex_tri = if_triloops[i];
                 
-                int newscore = - v_score_hairpin(i, j, nuci, nuci1, nucj_1, nucj, tetra_hex_tri);
+                ENERGY_TYPE newscore = - v_score_hairpin(i, j, nuci, nuci1, nucj_1, nucj, tetra_hex_tri);
+                if (eos_cb) (*eos_cb)(i+1, newscore / -1);
                 if (is_verbose)
                     printf("Hairpin loop ( %d, %d) %c%c : %.2f\n", i+1, j+1, seq[i], seq[j], newscore / -100.0);
+#else
+                ENERGY_TYPE newscore = - 100.0 * score_hairpin(i, j, nuci, nuci1, nucj_1, nucj);
+                if (eos_cb) (*eos_cb)(i+1, newscore);
+                if (is_verbose)
+                    printf("Hairpin loop ( %d, %d) %c%c : %.2f\n", i+1, j+1, seq[i], seq[j], newscore);
+#endif
                 total_energy += newscore;
             }
 
@@ -90,21 +129,56 @@
                 int p = get<0>(inner_loop), q = get<1>(inner_loop);
 
                 int nucp_1 = eval_nucs[p-1], nucp = eval_nucs[p], nucq = eval_nucs[q], nucq1 = eval_nucs[q+1];
-
-                int newscore = - v_score_single(i,j,p,q, nuci, nuci1, nucj_1, nucj,
+#ifdef lv
+                ENERGY_TYPE newscore = - v_score_single(i,j,p,q, nuci, nuci1, nucj_1, nucj,
                                                   nucp_1, nucp, nucq, nucq1);
+                if (eos_cb) (*eos_cb)(i+1, newscore / -1);
                 if (is_verbose)
                     printf("Interior loop ( %d, %d) %c%c; ( %d, %d) %c%c : %.2f\n", i+1, j+1, seq[i], seq[j], p+1, q+1, seq[p],seq[q], newscore / -100.0);
+#else
+
+
+                ENERGY_TYPE newscore = 0;
+                if ((p == i - 1 && q == j + 1) || (p == i + 1 && q == j - 1)) {
+                        newscore = -100.0 * score_helix(nuci, nuci1, nucj_1, nucj);
+                } else {
+                    // single branch
+
+                        newscore = -100.0 * score_single(i, j, p, q, seq_length, nuci, nuci1, nucj_1, nucj, nucp_1, nucp, nucq, nucq1);
+                        //newscore = //score_junction_B(p, q, nucp, nucp_1, nucq1, nucq);// +
+                            //score_junction_B(j, i, nucj, nucj1, nuci_1, nuci);// + // could move this part out
+                            // score_single_without_junctionB(p, q, i, j, nuci_1, nuci, nucj, nucj1)
+                            // score_single_without_junctionB(i, j, p, q, nucp, nucp_1, nucq1, nucq);
+                }
+
+                // len is actually unused by score_single, so using 0 in its place.
+                // ENERGY_TYPE newscore = - score_helix(i,j,p,q);
+                //ENERGY_TYPE newscore = - score_helix(nuci, nuci1, nucj_1, nucj);
+                if (eos_cb) (*eos_cb)(i+1, newscore);
+                if (is_verbose)
+                    printf("Interior loop ( %d, %d) %c%c; ( %d, %d) %c%c : %.2f\n", i+1, j+1, seq[i], seq[j], p+1, q+1, seq[p],seq[q], newscore);
+#endif
                 total_energy += newscore;
             }
 
             else { //multi
-                int multi_score = 0;
+#ifdef lv
+                ENERGY_TYPE multi_score = 0;
                 multi_score += M1_energy[i];
                 multi_score += - v_score_multi(i, j, nuci, nuci1, nucj_1, nucj, seq_length);
                 multi_score += - v_score_multi_unpaired(i+1, i + multi_number_unpaired[i]); // current model is 0
+                if (eos_cb) (*eos_cb)(i+1, multi_score / -1);
                 if (is_verbose)
                     printf("Multi loop ( %d, %d) %c%c : %.2f\n", i+1, j+1, seq[i], seq[j], multi_score / -100.0);
+#else
+                ENERGY_TYPE multi_score = 0;
+                multi_score += M1_energy[i];
+                multi_score += -100.0 * score_multi(i, j, nuci, nuci1, nucj_1, nucj, seq_length);
+                multi_score += -100.0 * score_multi_unpaired(i+1, i + multi_number_unpaired[i]); // current model is 0
+                if (eos_cb) (*eos_cb)(i+1, multi_score);
+                if (is_verbose)
+                    printf("Multi loop ( %d, %d) %c%c : %.2f\n", i+1, j+1, seq[i], seq[j], multi_score);
+#endif
                 total_energy += multi_score;
             }
 
@@ -112,23 +186,57 @@
             inner_loop = make_tuple(i, j);
 
             // possible M
-            if (!stk.empty())
+            if (!stk.empty()) {
+#ifdef lv
                 M1_energy[stk.top().first] += - v_score_M1(i, j, j, nuci_1, nuci, nucj, nucj1, seq_length);
+#else
+                M1_energy[stk.top().first] += -100.0 * score_M1(i, j, j, nuci_1, nuci, nucj, nucj1, seq_length);
+#endif
+            }
 
             // check if adding external energy
             if (stk.empty()) {
                 int k = i - 1;
                 int nuck = k > -1 ? eval_nucs[k] : -1;
                 int nuck1 = eval_nucs[k+1];
+#ifdef lv
                 external_energy +=  - v_score_external_paired(k+1, j, nuck, nuck1,
                                                             nucj, nucj1, seq_length);
+#else
+                external_energy +=  - 100.0 * score_external_paired(k+1, j, nuck, nuck1,
+                                                            nucj, nucj1, seq_length);
+                if (is_verbose) {
+                    printf("Adding external_paired ( %d, %d) %c %c %c %c %d : %.2f %.2f\n", k+1, j, nuck, nuck1, nucj, nucj1, seq_length, score_external_paired(k+1, j, nuck, nuck1,
+                                                            nucj, nucj1, seq_length), external_energy);
+                }
+                    
+#endif
                 // external_energy += 0; currently external unpaired is 0
             }
         }
     }
 
+#ifndef lv
+    // accumulated external unpaired number
+    external_energy += -100.0 * num_external_unpaired * external_unpaired;
+#endif    
+
+#ifdef lv
     if (is_verbose)
         printf("External loop : %.2f\n", external_energy / -100.0);
+    if (eos_cb) (*eos_cb)(0, external_energy / -1);
+#else
+    if (is_verbose)
+        printf("External loop : %.2f\n", external_energy);
+    if (eos_cb) (*eos_cb)(0, external_energy);
+#endif
     total_energy += external_energy;
+
+#ifdef lv
     return total_energy;
-}
\ No newline at end of file
+#else
+    // if (all_unpaired) return 0;
+    
+    return -1 * total_energy;
+#endif
+}
diff -X .gitignore -ur LinearFold_stock/src/LinearFold.h LinearFold/src/LinearFold.h
--- LinearFold_stock/src/LinearFold.h	2020-06-24 15:45:43.433567579 -0400
+++ LinearFold/src/LinearFold.h	2020-06-23 19:53:08.557451053 -0400
@@ -110,6 +110,8 @@
     // DecoderResult parse(std::string& seq);
     DecoderResult parse(std::string& seq, std::vector<int>* cons);
 
+	void cal_PairProb(State& viterbi);
+
 private:
     void get_parentheses(char* result, std::string& seq);
 
diff -X .gitignore -ur LinearFold_stock/src/Utils/utility.h LinearFold/src/Utils/utility.h
--- LinearFold_stock/src/Utils/utility.h	2020-06-24 15:45:43.433567579 -0400
+++ LinearFold/src/Utils/utility.h	2020-06-24 15:44:38.496531308 -0400
@@ -13,7 +13,11 @@
 #include <cstring>
 #include <assert.h>
 
+#ifdef le
+#include "../EternaFold/EternaFold/parameters/LinearFold/feature_weight_e.h"
+#else
 #include "feature_weight.h"
+#endif
 
 #define INF 1000000007
 
